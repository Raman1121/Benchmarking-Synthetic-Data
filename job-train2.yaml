apiVersion: batch/v1
kind: Job
metadata:
  generateName: ${USER}-job-train-${JOB_SUFFIX}
  labels:
    eidf/user: ${USER}
    kueue.x-k8s.io/queue-name: ${QUEUE_NAME}
    kueue.x-k8s.io/priority-class: batch-workload-priority
spec:
  completions: 1
  parallelism: 1
  completionMode: Indexed
  backoffLimit: 0
  activeDeadlineSeconds: 864000 # Still applies - Job will be killed after 10 days
  ttlSecondsAfterFinished: 2592000 # Will apply only after the Job finally finishes (e.g., activeDeadlineSeconds hit, or manual deletion)
  template:
    metadata:
      labels:
        eidf/user: ${USER}
    spec:
      restartPolicy: OnFailure # Pod will restart if it fails *before* reaching the sleep
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: nvidia.com/gpu.product
                    operator: In
                    values:
                      - NVIDIA-H200
      tolerations:
        - key: "eidf098"
          operator: "Equal"
          value: "True"
          effect: "NoSchedule"
        - key: "eidf107"
          operator: "Equal"
          value: "True"
          effect: "NoSchedule"
      containers:
        - name: pytorch-cuda11-7
          image: pytorch/pytorch:2.0.1-cuda11.7-cudnn8-devel
          workingDir: "/workspace/Benchmarking-Synthetic-Data"
          env:
            # ... (your env vars including TZ and DEBIAN_FRONTEND) ...
            - name: TZ
              value: "Etc/UTC"
            - name: DEBIAN_FRONTEND
              value: "noninteractive"
            - name: TORCH_NCCL_ASYNC_ERROR_HANDLING
              value: "1"
            - name: NCCL_DEBUG
              value: "INFO"
            - name: NCCL_IB_DISABLE
              value: "1"
            - name: MAX_DELTA
              value: "${MAX_DELTA}"
            - name: NCCL_IB_HCA
              value: "^mlx5"
            - name: PYTHONPATH
              value: "/workspace/Benchmarking-Synthetic-Data"
          command: ["/bin/bash", "-c"]
          args:
            - |
              # Wrap the main script logic in a function or subshell (optional but cleaner)
              run_script() {
                set -e # Exit on errors *within* this function/subshell

                echo "Changing branch to eidf"
                git checkout eidf

                echo "Copying files to /pvc"
                cp -r /workspace/Benchmarking-Synthetic-Data /pvc/
                cd /pvc/Benchmarking-Synthetic-Data

                echo "Updating apt and installing packages..."
                apt update && apt install -y --no-install-recommends \
                    wget \
                    git \
                    unzip \
                    zip \
                    libgl1 \
                    libglib2.0-0 \
                    ffmpeg \
                    tzdata
                rm -rf /var/lib/apt/lists/*

                echo "Setting up environment..."
                export PYTHONPATH=$PYTHONPATH:/workspace/Benchmarking-Synthetic-Data
                python3 -c "import torch; print(torch.__version__); print(torch.cuda.is_available())"

                python3 -m pip install --upgrade pip setuptools wheel
                pip install wavedrom

                echo "Installing LLaVA-Rad"
                cd Downstream_Training/LLaVA-Rad
                pip install --upgrade pip
                pip install -e .

                echo "Installing flash-attn"
                pip install ninja
                pip install flash-attn --no-build-isolation

                echo "Running EVAL!!!"
                ./scripts/eval.sh

                echo "Script finished successfully."
              }

              # Execute the script function and capture its exit code
              run_script
              SCRIPT_EXIT_CODE=$?

              if [ $SCRIPT_EXIT_CODE -ne 0 ]; then
                echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
                echo "!!!! SCRIPT FAILED WITH EXIT CODE: $SCRIPT_EXIT_CODE !!!!"
                echo "!!!! Sleeping indefinitely for debugging...        !!!!"
                echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              else
                echo "Script completed successfully. Sleeping indefinitely..."
              fi

              # --- ADDED SLEEP ---
              # Keep the container running indefinitely
              sleep infinity
              # --- END ADDED SLEEP ---

          resources:
            limits:
              nvidia.com/gpu: "1"
              cpu: "4"
              memory: "32Gi"
          volumeMounts:
            - name: workspace
              mountPath: /workspace
            - name: writeable
              mountPath: /pvc
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: workspace
          nfs:
            server: 10.24.6.77
            path: /user/s2198939-eidf107
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 16Gi
        - name: writeable
          persistentVolumeClaim:
            claimName: mimic-cxr2